library(RCurl)
api <- getURL("http://worldcup.kimonolabs.com/api/players/{player_id}?apikey=39f3bf182a2bebddddb1b9c7346d4f35")
api
api <- getURL("http://worldcup.kimonolabs.com/api/players?apikey=39f3bf182a2bebddddb1b9c7346d4f35")
api
api = getURL("http://worldcup.kimonolabs.com/api/players?apikey=39f3bf182a2bebddddb1b9c7346d4f35")
api
?content
players <- "van Barneveld"
averages <- 92.79
result <- "Win"
players <- c(players, "van der Voort")
averages <- c(averages, 89.1)
result <- c(result, "Loss")
players <- c(players, "Taylor")
averages <- c(averages, 101.79)
result <- c(result, "Win")
players <- c(players, "D. Webster")
averages <- c(averages, 96.58)
result <- c(result, "Loss")
players <- c(players, "Pipe")
averages <- c(averages, 96.66)
result <- c(result, "Loss")
players <- c(players, "M. Smith")
averages <- c(averages, 98.87)
result <- c(result, "Win")
players <- c(players, "Newton")
averages <- c(averages, 81.99)
result <- c(result, "Win")
players <- c(players, "Baxter")
averages <- c(averages, 81.62)
result <- c(result, "Loss")
players <- c(players, "Hamilton")
averages <- c(averages, 94.42)
result <- c(result, "Win")
players <- c(players, "Jones")
averages <- c(averages, 82.45)
result <- c(result, "Loss")
players <- c(players, "Thorton")
averages <- c(averages, 97.06)
result <- c(result, "Loss")
players <- c(players, "Nicholson")
averages <- c(averages, 94.95)
result <- c(result, "Win")
players <- c(players, "Dolan")
averages <- c(averages, 88.91)
result <- c(result, "Loss")
players <- c(players, "Burnett")
averages <- c(averages, 93.85)
result <- c(result, "Win")
players <- c(players, "Chisnall")
averages <- c(averages, 98.96)
result <- c(result, "Win")
players <- c(players, "Winstanley")
averages <- c(averages, 94.43)
result <- c(result, "Loss")
players <- c(players, "Wade")
averages <- c(averages, 93.01)
result <- c(result, "Win")
players <- c(players, "A. Smith")
averages <- c(averages, 89.67)
result <- c(result, "Loss")
players <- c(players, "van Gerwen")
averages <- c(averages, 98.85)
result <- c(result, "Win")
players <- c(players, "Beaton")
averages <- c(averages, 92.77)
result <- c(result, "Loss")
players <- c(players, "Whitlock")
averages <- c(averages, 93.88)
result <- c(result, "Win")
players <- c(players, "Painter")
averages <- c(averages, 90.86)
result <- c(result, "Loss")
players <- c(players, "White")
averages <- c(averages, 101.37)
result <- c(result, "Win")
players <- c(players, "Jenkins")
averages <- c(averages, 91.28)
result <- c(result, "Loss")
result <- factor(result)
df <- data.frame(player, averages, result)
players <- "van Barneveld"
averages <- 92.79
result <- "Win"
players <- c(players, "van der Voort")
averages <- c(averages, 89.1)
result <- c(result, "Loss")
players <- c(players, "Taylor")
averages <- c(averages, 101.79)
result <- c(result, "Win")
players <- c(players, "D. Webster")
averages <- c(averages, 96.58)
result <- c(result, "Loss")
players <- c(players, "Pipe")
averages <- c(averages, 96.66)
result <- c(result, "Loss")
players <- c(players, "M. Smith")
averages <- c(averages, 98.87)
result <- c(result, "Win")
players <- c(players, "Newton")
averages <- c(averages, 81.99)
result <- c(result, "Win")
players <- c(players, "Baxter")
averages <- c(averages, 81.62)
result <- c(result, "Loss")
players <- c(players, "Hamilton")
averages <- c(averages, 94.42)
result <- c(result, "Win")
players <- c(players, "Jones")
averages <- c(averages, 82.45)
result <- c(result, "Loss")
players <- c(players, "Thorton")
averages <- c(averages, 97.06)
result <- c(result, "Loss")
players <- c(players, "Nicholson")
averages <- c(averages, 94.95)
result <- c(result, "Win")
players <- c(players, "Dolan")
averages <- c(averages, 88.91)
result <- c(result, "Loss")
players <- c(players, "Burnett")
averages <- c(averages, 93.85)
result <- c(result, "Win")
players <- c(players, "Chisnall")
averages <- c(averages, 98.96)
result <- c(result, "Win")
players <- c(players, "Winstanley")
averages <- c(averages, 94.43)
result <- c(result, "Loss")
players <- c(players, "Wade")
averages <- c(averages, 93.01)
result <- c(result, "Win")
players <- c(players, "A. Smith")
averages <- c(averages, 89.67)
result <- c(result, "Loss")
players <- c(players, "van Gerwen")
averages <- c(averages, 98.85)
result <- c(result, "Win")
players <- c(players, "Beaton")
averages <- c(averages, 92.77)
result <- c(result, "Loss")
players <- c(players, "Whitlock")
averages <- c(averages, 93.88)
result <- c(result, "Win")
players <- c(players, "Painter")
averages <- c(averages, 90.86)
result <- c(result, "Loss")
players <- c(players, "White")
averages <- c(averages, 101.37)
result <- c(result, "Win")
players <- c(players, "Jenkins")
averages <- c(averages, 91.28)
result <- c(result, "Loss")
result <- factor(result)
df <- data.frame(players, averages, result)
head(df)
barplot(df$averages)
df[with(df, order(-averages)), ]
df <- df[with(df, order(-averages)), ]
head(df)
barplot(df$averages)
xlab(df$players)
barplot(df$averages, names.arg = df$players)
library(ggplot2)
ggplot(data=df, aes(x=players, y=averages))
ggplot(data=df, aes(x=players, y=averages)) + ggplot(data=df, aes(x=time, y=total_bill))
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity")
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") = theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
levels(df$players)
df$players <- reorder(df$players, df$averages)
levels(df$players)
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
?reorder
df$players <- reorder(df$players, -df$averages)
levels(df$players)
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_certesian(ylim = c(60,105))
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105))
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average")
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
players <- "van Barneveld"
averages <- 92.79
result <- "Win"
players <- c(players, "van der Voort")
averages <- c(averages, 89.1)
result <- c(result, "Loss")
players <- c(players, "Taylor")
averages <- c(averages, 101.79)
result <- c(result, "Win")
players <- c(players, "D. Webster")
averages <- c(averages, 96.58)
result <- c(result, "Loss")
players <- c(players, "Pipe")
averages <- c(averages, 96.66)
result <- c(result, "Loss")
players <- c(players, "M. Smith")
averages <- c(averages, 98.87)
result <- c(result, "Win")
players <- c(players, "Newton")
averages <- c(averages, 81.99)
result <- c(result, "Win")
players <- c(players, "Baxter")
averages <- c(averages, 81.62)
result <- c(result, "Loss")
players <- c(players, "Hamilton")
averages <- c(averages, 94.42)
result <- c(result, "Win")
players <- c(players, "Jones")
averages <- c(averages, 82.45)
result <- c(result, "Loss")
players <- c(players, "Thorton")
averages <- c(averages, 97.06)
result <- c(result, "Loss")
players <- c(players, "Nicholson")
averages <- c(averages, 94.95)
result <- c(result, "Win")
players <- c(players, "Dolan")
averages <- c(averages, 88.91)
result <- c(result, "Loss")
players <- c(players, "Burnett")
averages <- c(averages, 93.85)
result <- c(result, "Win")
players <- c(players, "Chisnall")
averages <- c(averages, 98.96)
result <- c(result, "Win")
players <- c(players, "Winstanley")
averages <- c(averages, 94.43)
result <- c(result, "Loss")
players <- c(players, "Wade")
averages <- c(averages, 93.01)
result <- c(result, "Win")
players <- c(players, "A. Smith")
averages <- c(averages, 89.67)
result <- c(result, "Loss")
players <- c(players, "van Gerwen")
averages <- c(averages, 98.85)
result <- c(result, "Win")
players <- c(players, "Beaton")
averages <- c(averages, 92.77)
result <- c(result, "Loss")
players <- c(players, "Whitlock")
averages <- c(averages, 93.88)
result <- c(result, "Win")
players <- c(players, "Painter")
averages <- c(averages, 90.86)
result <- c(result, "Loss")
players <- c(players, "White")
averages <- c(averages, 101.37)
result <- c(result, "Win")
players <- c(players, "Jenkins")
averages <- c(averages, 91.28)
result <- c(result, "Loss")
result <- factor(result)
df <- data.frame(players, averages, result)
df <- df[with(df, order(-averages)), ]
df$players <- reorder(df$players, -df$averages)
df$result <- reorder(df$result, -df$result)
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result color=(c("green", "red")), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result, color=(c("green", "red")), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), color=c("green", "red") stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", "red") stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill="green" stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill="green", stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", red), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", "red"), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), fill=c("green", "red"), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(df, aes(x=players, y=averages, fill=result)) +geom_bar()
ggplot(df, aes(x=players, y=averages)) +geom_bar()
ggplot(data=df, aes(x=players, y=averages)) + geom_bar()
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=players, y=averages, fill=result)) + geom_bar(stat="identity")
?ggplot
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
?aes
?geom_bar
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(factor=result, fill=c("green", "red")), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages)scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank())
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank()
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank()))
ggplot(data=df, aes(x=players, y=averages), scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) + geom_bar(aes(fill=result), stat="identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + coord_cartesian(ylim = c(60,105)) + ylab("Average") + theme(axis.title.x = element_blank()))
?scale_fill_manual
plot <- ggplot(data=df, aes(x=players, y=averages))
plot + scale_colour_manual(values = c("green", "red"))
plot + scale_colour_manual(values = c("green", "red")) + geom_bar(aes(fill=result))
plot + scale_colour_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
plot + scale_fill_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
levels(df$result)
df$result <- factor(df$result, levels(df$result)[2,1])
df$result <- factor(df$result, levels(df$result)[c(2,1)])
levels(df$result)
plot + scale_fill_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
levels(df$result)
plot + scale_fill_manual(values = c("green", "red")) + geom_bar(aes(fill=result), stat="identity")
getwd()
library(plyr)
## Get test data
testDf <- read.table("./UCI HAR Dataset/test/X_test.txt")
testSubjectsVector <- scan("./UCI HAR Dataset/test/subject_test.txt")
testActivityVector <- scan("./UCI HAR Dataset/test/y_test.txt")
featuresDf <-read.table("./UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
testDf <- cbind(testSubjectsVector, testActivityVector, testDf)
colnames(testDf) <- c("Subject", "Activity", featuresDf$V2)
## Get train data
trainDf <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainSubjectsVector <- scan("./UCI HAR Dataset/train/subject_train.txt")
trainActivityVector <- scan("./UCI HAR Dataset/train/y_train.txt")
trainDf <- cbind(trainSubjectsVector, trainActivityVector, trainDf)
colnames(trainDf) <- c("Subject", "Activity", featuresDf$V2)
## According to David Hood (Community TA) - files in inertial folder are not
## required here. Now row binding the two frames
fullDf <- rbind(testDf, trainDf)
## Find the column names which end with "mean()" or "std()"
meanCols <- grep("-mea", colnames(fullDf), fixed = TRUE)
sdCols <- grep("std()", colnames(fullDf), fixed = TRUE)
## These are the columns needed along with the first 2 which label subject and
## acitivity.
colsNeeded <- c(1, 2, meanCols, sdCols)
## Then select those columns out.
fullDf <- fullDf[,colsNeeded]
## Get the activity labels
activityLabels = read.table("./UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
fullDf[,2] <- mapvalues(fullDf[,2], from = activityLabels[,1], to = activityLabels[,2])
## Step 5: Column names are cleaned up slightly to remove punctuation.
## Column name descriptions will be available in the code book.
finalDf = data.frame(matrix(ncol = ncol(fullDf)-2, nrow = 30 + nrow(activityLabels)))
colnames(finalDf) <- c(colnames(fullDf)[c(3:ncol(fullDf))])
colnames(finalDf) <- sub("()","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- gsub("-","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("mean","Mean", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("std","Std", colnames(finalDf), fixed=TRUE)
rowNames = vector()
for (i in c(1:30)) {
rowNames <- c(rowNames, paste("Subject", toString(i)))
}
rownames(finalDf) <- c(activityLabels[,2], rowNames)
for (i in activityLabels[,2]) {
subset <- fullDf[fullDf$Activity == i,c(3:ncol(fullDf))]
finalDf[i,] = colMeans(subset)
}
for (i in c(1:30)) {
subset <- fullDf[fullDf$Subject == i, c(3:ncol(fullDf))]
finalDf[rowNames[i],] = colMeans(subset)
}
write.table(finalDf, "finaltable.txt")
getwd()
library(plyr)
## Get test data
testDf <- read.table("./UCI HAR Dataset/test/X_test.txt")
testSubjectsVector <- scan("./UCI HAR Dataset/test/subject_test.txt")
testActivityVector <- scan("./UCI HAR Dataset/test/y_test.txt")
featuresDf <-read.table("./UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
testDf <- cbind(testSubjectsVector, testActivityVector, testDf)
colnames(testDf) <- c("Subject", "Activity", featuresDf$V2)
## Get train data
trainDf <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainSubjectsVector <- scan("./UCI HAR Dataset/train/subject_train.txt")
trainActivityVector <- scan("./UCI HAR Dataset/train/y_train.txt")
trainDf <- cbind(trainSubjectsVector, trainActivityVector, trainDf)
colnames(trainDf) <- c("Subject", "Activity", featuresDf$V2)
## According to David Hood (Community TA) - files in inertial folder are not
## required here. Now row binding the two frames
fullDf <- rbind(testDf, trainDf)
## Find the column names which end with "mean()" or "std()"
meanCols <- grep("-mea", colnames(fullDf), fixed = TRUE)
sdCols <- grep("std()", colnames(fullDf), fixed = TRUE)
## These are the columns needed along with the first 2 which label subject and
## acitivity.
colsNeeded <- c(1, 2, meanCols, sdCols)
## Then select those columns out.
fullDf <- fullDf[,colsNeeded]
## Get the activity labels
activityLabels = read.table("./UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
fullDf[,2] <- mapvalues(fullDf[,2], from = activityLabels[,1], to = activityLabels[,2])
## Step 5: Column names are cleaned up slightly to remove punctuation.
## Column name descriptions will be available in the code book.
finalDf = data.frame(matrix(ncol = ncol(fullDf)-2, nrow = 30 + nrow(activityLabels)))
colnames(finalDf) <- c(colnames(fullDf)[c(3:ncol(fullDf))])
colnames(finalDf) <- sub("()","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- gsub("-","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("mean","Mean", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("std","Std", colnames(finalDf), fixed=TRUE)
rowNames = vector()
for (i in c(1:30)) {
rowNames <- c(rowNames, paste("Subject", toString(i)))
}
rownames(finalDf) <- c(activityLabels[,2], rowNames)
for (i in activityLabels[,2]) {
subset <- fullDf[fullDf$Activity == i,c(3:ncol(fullDf))]
finalDf[i,] = colMeans(subset)
}
for (i in c(1:30)) {
subset <- fullDf[fullDf$Subject == i, c(3:ncol(fullDf))]
finalDf[rowNames[i],] = colMeans(subset)
}
write.table(finalDf, "finaltable.txt")
clear
setwd("./datasciencecoursera/Getting and Cleaning Data/Course Project/")
getwd()
library(plyr)
## Get test data
testDf <- read.table("./UCI HAR Dataset/test/X_test.txt")
testSubjectsVector <- scan("./UCI HAR Dataset/test/subject_test.txt")
testActivityVector <- scan("./UCI HAR Dataset/test/y_test.txt")
featuresDf <-read.table("./UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
testDf <- cbind(testSubjectsVector, testActivityVector, testDf)
colnames(testDf) <- c("Subject", "Activity", featuresDf$V2)
## Get train data
trainDf <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainSubjectsVector <- scan("./UCI HAR Dataset/train/subject_train.txt")
trainActivityVector <- scan("./UCI HAR Dataset/train/y_train.txt")
trainDf <- cbind(trainSubjectsVector, trainActivityVector, trainDf)
colnames(trainDf) <- c("Subject", "Activity", featuresDf$V2)
## According to David Hood (Community TA) - files in inertial folder are not
## required here. Now row binding the two frames
fullDf <- rbind(testDf, trainDf)
## Find the column names which end with "mean()" or "std()"
meanCols <- grep("-mea", colnames(fullDf), fixed = TRUE)
sdCols <- grep("std()", colnames(fullDf), fixed = TRUE)
## These are the columns needed along with the first 2 which label subject and
## acitivity.
colsNeeded <- c(1, 2, meanCols, sdCols)
## Then select those columns out.
fullDf <- fullDf[,colsNeeded]
## Get the activity labels
activityLabels = read.table("./UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
fullDf[,2] <- mapvalues(fullDf[,2], from = activityLabels[,1], to = activityLabels[,2])
## Step 5: Column names are cleaned up slightly to remove punctuation.
## Column name descriptions will be available in the code book.
finalDf = data.frame(matrix(ncol = ncol(fullDf)-2, nrow = 30 + nrow(activityLabels)))
colnames(finalDf) <- c(colnames(fullDf)[c(3:ncol(fullDf))])
colnames(finalDf) <- sub("()","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- gsub("-","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("mean","Mean", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("std","Std", colnames(finalDf), fixed=TRUE)
rowNames = vector()
for (i in c(1:30)) {
rowNames <- c(rowNames, paste("Subject", toString(i)))
}
rownames(finalDf) <- c(activityLabels[,2], rowNames)
for (i in activityLabels[,2]) {
subset <- fullDf[fullDf$Activity == i,c(3:ncol(fullDf))]
finalDf[i,] = colMeans(subset)
}
for (i in c(1:30)) {
subset <- fullDf[fullDf$Subject == i, c(3:ncol(fullDf))]
finalDf[rowNames[i],] = colMeans(subset)
}
write.table(finalDf, "finaltable.txt")
testTable <- read.table("finaltable.txt")
testTable
dim(testTable)
getwd()
library(plyr)
## Get test data
testDf <- read.table("./UCI HAR Dataset/test/X_test.txt")
testSubjectsVector <- scan("./UCI HAR Dataset/test/subject_test.txt")
testActivityVector <- scan("./UCI HAR Dataset/test/y_test.txt")
featuresDf <-read.table("./UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
testDf <- cbind(testSubjectsVector, testActivityVector, testDf)
colnames(testDf) <- c("Subject", "Activity", featuresDf$V2)
## Get train data
trainDf <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainSubjectsVector <- scan("./UCI HAR Dataset/train/subject_train.txt")
trainActivityVector <- scan("./UCI HAR Dataset/train/y_train.txt")
trainDf <- cbind(trainSubjectsVector, trainActivityVector, trainDf)
colnames(trainDf) <- c("Subject", "Activity", featuresDf$V2)
## According to David Hood (Community TA) - files in inertial folder are not
## required here. Now row binding the two frames
fullDf <- rbind(testDf, trainDf)
## Find the column names which end with "mean()" or "std()"
meanCols <- grep("-mean()", colnames(fullDf), fixed = TRUE)
sdCols <- grep("std()", colnames(fullDf), fixed = TRUE)
## These are the columns needed along with the first 2 which label subject and
## acitivity.
colsNeeded <- c(1, 2, meanCols, sdCols)
## Then select those columns out.
fullDf <- fullDf[,colsNeeded]
## Get the activity labels
activityLabels = read.table("./UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
fullDf[,2] <- mapvalues(fullDf[,2], from = activityLabels[,1], to = activityLabels[,2])
## Step 5: Column names are cleaned up slightly to remove punctuation.
## Column name descriptions will be available in the code book.
finalDf = data.frame(matrix(ncol = ncol(fullDf)-2, nrow = 30 + nrow(activityLabels)))
colnames(finalDf) <- c(colnames(fullDf)[c(3:ncol(fullDf))])
colnames(finalDf) <- sub("()","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- gsub("-","", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("mean","Mean", colnames(finalDf), fixed=TRUE)
colnames(finalDf) <- sub("std","Std", colnames(finalDf), fixed=TRUE)
rowNames = vector()
for (i in c(1:30)) {
rowNames <- c(rowNames, paste("Subject", toString(i)))
}
rownames(finalDf) <- c(activityLabels[,2], rowNames)
for (i in activityLabels[,2]) {
subset <- fullDf[fullDf$Activity == i,c(3:ncol(fullDf))]
finalDf[i,] = colMeans(subset)
}
for (i in c(1:30)) {
subset <- fullDf[fullDf$Subject == i, c(3:ncol(fullDf))]
finalDf[rowNames[i],] = colMeans(subset)
}
write.table(finalDf, "finaltable.txt")
testTable <- read.table("finaltable.txt")
dim(testTable)
